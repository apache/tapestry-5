plugins {
    id 'tapestry.junit5-convention'
    id 'antlr'
}

description = 'Fast class property discovery, reading and writing library based on bytecode generation. Extracted from Apache Tapestry, but not dependent on the Web framework (tapestry-core) nor the IoC one (tapestry-ioc).'

dependencies {
    implementation project(':plastic')
    implementation project(':tapestry5-annotations')
    implementation project(':commons')

    implementation libs.slf4j.api

    antlr libs.antlr

    // Transitive will bring in the unwanted string template library as well
    implementation(libs.antlr.runtime) {
        exclude group: 'org.antlr', module: 'stringtemplate'
    }

    testImplementation platform(libs.spock.bom)
    testImplementation libs.spock.core
}

tasks.named('clean') {
    delete generateGrammarSource.outputDirectory
}

tasks.named('compileJava', JavaCompile) {
    dependsOn generateGrammarSource
    options.fork = true
    options.forkOptions.memoryMaximumSize = '512M'
}

tasks.named('sourcesJar') {
    dependsOn 'generateGrammarSource'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourceSets {
    main {
        java {
            srcDir generateGrammarSource.outputDirectory
        }
    }
}
