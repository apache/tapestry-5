import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

tasks.register('copyGradleWrapper', Copy) {
    group = 'Build Setup'
    description = 'Copies Gradle wrapper files to archetype resources'

    def srcDir = layout.buildDirectory.dir('wrapper')
    inputs.dir srcDir
    outputs.dir layout.buildDirectory.dir('resources/main/archetype-resources')

    from srcDir
    into layout.buildDirectory.dir('resources/main/archetype-resources')
    exclude '.gradle'
}

tasks.register('addGradleWrapper', Exec) {
    group = 'Build Setup'
    description = 'Generates Gradle wrapper in temporary directory'

    workingDir = layout.buildDirectory.dir('wrapper')
    commandLine = ["${rootProject.projectDir}/gradlew", 'wrapper', '--gradle-version', '8.14.2']
    standardOutput = new ByteArrayOutputStream()

    doFirst {
        def wrapperDirectory = layout.buildDirectory.dir('wrapper').get().asFile
        wrapperDirectory.mkdirs()

        def settings = new File(wrapperDirectory, 'settings.gradle')
        settings.createNewFile()
    }

    finalizedBy copyGradleWrapper
}

tasks.register('addWrappers') {
    group = 'Build Setup'
    description = 'Coordinates wrapper generation tasks'

    dependsOn addGradleWrapper
}

tasks.register('processFiltered', Copy) {
    group = 'Build'
    description = 'Processes filtered resources with token replacement'

    def srcDir = layout.projectDirectory.dir('src/main/resources-filtered')
    inputs.dir srcDir
    outputs.dir layout.buildDirectory.dir('resources/main')

    from srcDir
    into layout.buildDirectory.dir('resources/main')

    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: [
        quickstartVersion: project.parent.version,
        tapestryVersion: project.parent.version,
        springBootVersion: libs.versions.quickstart.spring.boot.get(),
        junitVersion: libs.versions.junit5.get(),
        jacksonVersion: libs.versions.jackson.get(),
        log4jVersion: libs.versions.quickstart.log4j.get(),
        yassonVersion: libs.versions.quickstart.yasson.get(),
        servletVersion: libs.versions.jakarta.servlet.api.get(),
        mavenCompilerVersion: libs.versions.quickstart.maven.compiler.get(),
        mavenSurefireVersion: libs.versions.quickstart.maven.surefire.get(),
        mavenWarVersion: libs.versions.quickstart.maven.war.get(),
        mavenJettyVersion: libs.versions.quickstart.maven.jetty.get(),
        grettyVersion: libs.versions.quickstart.gretty.get()
    ])
}

tasks.named('processResources') {
    dependsOn addWrappers, processFiltered
}

tasks.named('jar') {
    dependsOn copyGradleWrapper
}
