 ----
 Object Providers
 ----

Object Providers

  The
  {{{apidocs/org/apache/tapestry/ioc/annotations/Inject.html}@Inject annotation}}
  is a flexible way to inject dependencies into a service. With this annotation
  the value to be injected is not identified by a service id <per se>. Instead
  the annotation's value is an <<object reference>>: a combination of a
  <<provider prefix>> and an <<expression>> (separated by a colon). 
  
  The provider prefix
  maps to a particular instance of
  {{{apidocs/org/apache/tapestry/ioc/ObjectProvider.html}ObjectProvider}}, which
  understands the expression.
  
  In practice, @InjectService("Foo") and @Inject("service:Foo") work identically,
  Here, the provider prefix is "service" and the expression (interprested as a service id)
  is "Foo".
  
* service provider

  As outlined above, the service provider interprets the expression as
  a service id.
  
* alias provider

  The tapestry module (provided by the {{{http://tapestry.apache.org/tapestry5/tapestry-core/}tapestry-core library}}) provides the
  {{{http://tapestry.apache.org/tapestry5/tapestry-core/guide/alias.html}alias}} object provider, which exists to allow
  for various forms of service overrides.
    
* default provider  
  
  If the string does not contain a prefix, then the value is treated as a literal string.
  It will be {{{coerce.html}coerced}} to the proper type (such as int or long).
  
Defining New Providers

  New providers can be specified by contributing to the
  tapestry.ioc.MasterObjectProvider service's configuration.  The configuration
  is mapped, with the keys being the provider prefix, and the values
  being the object provider implementation.
  
  Example:
  
+-----+
  public void contributeMasterObjectProvider(MappedConfiguration<String,ObjectProvider> configuration)
  {
    configuration.add("myprefix", new MyObjectProvider());
  }
+-----+

  Of course, this is a simplified example. In a real scenario, the provider is most likely
  a service with its own dependencies.      
  
  
Providers and Symbols

  It is occasionally useful to add a level of indirection, to allow control over exactly
  what service (or other object) is injected.  Both the Inject and InjectService
  annotations support the use of {{{symbols.html}symbols}}.