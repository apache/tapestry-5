 ---
 Forms in Tapestry
 ---
 
Chapter 4: Forms in Tapestry

  In the previous chapters, we saw how Tapestry can handle simple links, even links that pass information in the URL. In this chapter,
  we'll see how Tapestry can do the same, and quite a bit more, for HTML forms.  
  
  Form support in Tapestry is deep and rich, more than can be covered in a single chapter. However, we can show the basics, including
  some very common development patterns. To get started, let's create a simple address book application.
  
  We'll start with the data, a simple object to store the information we'll need. By convention, these classes go in a <<<data>>> sub-package.  Unlike
  the use of the <<<pages>>> sub-package (for page component classes), this is not enforced by Tapestry; it's just a convention.
  
  
  <<src/main/java/org/apache/tapestry/tutorial/data/Address.java:>>
  
----
package org.apache.tapestry.tutorial.data;

public class Address
{
  private Honorific _honorific;

  private String _firstName;

  private String _lastName;

  private String _street1;

  private String _street2;

  private String _city;

  private String _state;

  private String _zip;

  private String _email;

  private String _phone;

  public String getCity()
  {
    return _city;
  }

  public String getEmail()
  {
    return _email;
  }

  public String getFirstName()
  {
    return _firstName;
  }

  public Honorific getHonorific()
  {
    return _honorific;
  }

  public String getLastName()
  {
    return _lastName;
  }

  public String getPhone()
  {
    return _phone;
  }

  public String getState()
  {
    return _state;
  }

  public String getStreet1()
  {
    return _street1;
  }

  public String getStreet2()
  {
    return _street2;
  }

  public String getZip()
  {
    return _zip;
  }

  public void setCity(String city)
  {
    _city = city;
  }

  public void setEmail(String email)
  {
    _email = email;
  }

  public void setFirstName(String firstName)
  {
    _firstName = firstName;
  }

  public void setHonorific(Honorific honorific)
  {
    _honorific = honorific;
  }

  public void setLastName(String lastName)
  {
    _lastName = lastName;
  }

  public void setPhone(String phone)
  {
    _phone = phone;
  }

  public void setState(String state)
  {
    _state = state;
  }

  public void setStreet1(String street1)
  {
    _street1 = street1;
  }

  public void setStreet2(String street2)
  {
    _street2 = street2;
  }

  public void setZip(String zip)
  {
    _zip = zip;
  }
}
----

  It's just a collection of getter and setter methods.  We also need to define the enum type, Salutation:
  
  <<src/main/java/org/apache/tapestry/tutorial/data/Honorific.java:>>
  
---
package org.apache.tapestry.tutorial.data;

public enum Honorific
{
  MR, MRS, MISS, DR
}
---

* Address Pages

  We're probably going to create a few pages related to addresses: pages for creating them, for editting them, for searching and listing them.
  We'll create a sub-folder, address, to hold them.  Let's get started on the first of these pages, "address/Create"  (that's the real name, including
  the slash --- we'll see in a minute how that maps to classes and templates).
  
  First, we'll update the Start.html template, to create a link for creating a new page:
  
  <<src/main/webapp/WEB-INF/Start.html:>>

----
    <h1>Address Book</h1>

    <ul>
      <li><t:pagelink page="address/create">Create new address</t:pagelink></li>
    </ul>
----

   Now we need the page, let's start with an empty shell, just to test our navigation.
  
  <<src/main/webapp/WEB-INF/address/CreateAddress.html:>>
  
---
<html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_0_0.xsd">
  <head>
    <title>Create New Address</title>
  </head>
  <body>

    <h1>Create New Address</h1>

    <em>coming soon ...</em>

  </body>
</html>
---

  And the corresponding class:
  
  <<src/main/java/org/apache/tapestry/tutorial1/pages/address/CreateAddress.java:>>
  
----
package org.apache.tapestry.tutorial.pages.address;

public class CreateAddress
{

}
----
   
   So ... why is the class named "CreateAddress" and not simply "Create"?  Actually, we could have, and it would work.  Tapestry noticed the redundancy in the
   class name:  <<<org.apache.tapestry.tutorial1.pages.>>><address><<<.Create>>><Address> and just stripped it out.
   
   Eventually, your application will probably have more entities:  perhaps you'll have a "create/User" page and a "create/Payment" page and a "create/Account" page.
   Now, you <could> have a bunch of different classes named <<<Create>>> spread across a number of different packages.  That's legal Java, but it isn't ideal.  You may find yourself
   accidentally editting the Java code for creating an Account when your really want to be editting the code for creating a Payment.
   
   Tapestry is encouraging you to use a more descriptive name: <<<Create>>><Address> not just <<<Create>>>, but it isn't making you pay the cost (in terms of longer,
   uglier URLs).  The URL will still be http://localhost:8080/tutorial1/address/create.
   
* Using the BeanEditForm component

  Time to start putting together the logic for this form.  In fact, let's use a magic trick ... the BeanEditForm component.  This component can analyze a class and create an editor UI for it all in one go.
  Let's give it a try.
  
  Add the following to the CreateAddress template (replacing the "coming soon ..." message):
  
---
  <t:beaneditform object="address"/>
---

  And match that up with a property in the CreateAddress class:
  
----
  private Address _address;

  public Address getAddress()
  {
    return _address;
  }

  public void setAddress(Address address)
  {
    _address = address;
  }
----
   
   When you refresh the page, you'll see the following:
   
[address-v1.png] Initial version of the create address form

  Tapestry's done quite a bit of work here.  It's created a form that includes a field for each property.  Further, it's seen that the
  honorific property is an enumerated type, and presented that as a drop-down list.
  
  In addition, Tapestry has converted the property names ("city", "email", "firstName") to user presentable labels ("City", "Email", "First Name").
  In fact, these are \<label\> elements, so clicking a label will move the cursor into the corresponding field.
  
  This is an awesome start; it's a presentable interface, quite nice in fact for a few  minute's work.  But it's far from perfect; let's get started
  with some customizations.
  
* Changing field order

  It looks like the fields are being displayed in alphabetical order, ("city" first, "zip" last).  That's not quite the reality, however:  If you check the listing
  for the Address class, you'll see that the getter and setter methods are in alphabetical order (care of Eclipse, which generated all those methods from the fields).
     
  The BeanEditForm works in the order in which the <getter methods> are defined in the class.  Let's reorder them into a more reasonable order:
  
  * honorific
  
  * firstName
  
  * lastName
  
  * street1
  
  * street2
  
  * city
  
  * state
  
  * zip
  
  * email
  
  * phone
  
  []
  
  (This is also the order of in which the fields are defined.)
  
  Because Address is not a component class, it is necessary to restart Jetty to see the effects of these changes.
  
  Once Jetty is restarted, hit the browser's refresh button to see the fields in the correct order:
  
[address-v2.png] Create address form with fields in proper order

* Customizing labels

  Tapestry makes it pretty easy to customize the labels used on the fields.  It's just a matter of creating a <message catalog> for the page.
  
  In Tapestry, every page and component may have its own message catalog.  This is a standard Java properties file, and it is named the same
  as the page or component class, with a ".properties" extension.  A message catalog consists of a series of lines, each line is a message key and a message value
  seperated with an equals sign.
  
  All it takes is to create a message entry with a particular name:  the name of the property suffixed with "-label". As elsewhere, Tapestry is forgiving of case.
  
  <<src/main/resources/org/apache/tapestry/tutorial/pages/address/CreateAddress.properties:>>
  
----
street1-label=Street 1
street2-label=Street 2
email-label=E-Mail
zip-label=Zip Code
phone-label=Phone Number
----

  Since this is a <new> file (and not a change to an existing file), you will have to restart Jetty to force Tapestry to pick up the change.
  
[address-v3.png] Create Address form with field labels corrected
  
  However, things are getting a little crowded in the form.  That too is easy to fix: we can just provide our own overriding
  Cascading Style Sheet (CSS) rules.  Tapestry has automatically injected a built-in CSS style sheet to provide the fonts and colors in the page, we
  just need to tweak it a bit.  Add the following to CreateAddress.html:
  
----
<style>
  DIV.t-beaneditor LABEL { 
    width: 200px;
  }
</style>
----    

  The "t-beaneditor" CSS class refers to a \<div\> element around the \<label\> element.  Tapestry's style classes are all prefixed with "t-" (for "Tapestry") so that
  they don't conflict with anything your own web designers may decide to use.  In any case, this CSS rule forces the label to be 200 pixels wide (rather than
  the default, which is 10% of the overall page width).
  
[address-v4.png] Corrected width on labels

   We can also customize the options in the drop down list.  All we have to do is added entries to the message catalog matching the enum names to the desired labels.
   Update CreateAddress.properties and add:
   
----
MR=Mr.
MRS=Mrs.
DR=Dr.
----

  Notice that we don't have to include an option for MISS, because that is converted to "Miss" anyway.  You might just want to include it for
  clarity ... the point is, each option label is searched for seperately.

  Lastly, the default label on the submit button is "Create/Update" (BeanEditForm doesn't know how it is being used). Let's change that to "Create Address".
  
  That button is a component within the BeanEditForm component. It's not a property, so we can't just put a message into the 
  message catalog, the way we can with the fields.  Fortunately, the BeanEditForm component includes a parameter expressly for
  re-labelling the button. Simply change the CreateAddress component template:
  
----
  <t:beaneditform submitlabel="Create Address" object="address"/>
----

  The default for the submitlabel parameter is "Create/Update", but here we're overriding that default to a specific value.

  The final result shows the reformatting and relabeling:
  
[address-v5.png] Create Address form with proper labels

  Before continuing on to validation, a side note about message catalogs. 
  Message catalogs are not just for re-labeling fields and options; we'll see in later chapters how message catalogs are used in the context of
  localization and internationalization. 
  
  Instead of putting the label for the submit button directly inside the template, we're going to provide a reference to the label; the actual
  label will go in the message catalog. 
  
  In Tapestry, when binding a parameter, the value you provide may include a prefix.  The prefix guides Tapestry in how to interpret the rest of the
  the parameter value ... is it the name of a property?  The id of a component? A message key?
  
  Here we want to reference a message from the catalog, so we use the "message:" prefix:
  
----
  <t:beaneditform submitlabel="message:submit-label" object="address"/>
----

  And then define the submit-label key in the message catalog:
  
---
submit-label=Create Address
----

  At then end of the day, the exact same HTML is sent to the client, regardless of whether you include the label text directly in the template,
  or indirectly in the message catalog. In the long term, the latter approach will work better if you chose to internationalize your application.
   
  
