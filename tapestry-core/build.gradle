plugins {
    id 'tapestry.junit5-convention'
    id 'tapestry.testng-convention'
}

import org.apache.tools.ant.filters.ReplaceTokens
import t5build.*

description = 'Central module for Tapestry, containing all core services and components'

def mainGeneratedDir = 'src/main/generated'
def testGeneratedDir = 'src/test/generated'

dependencies {
    api project(':tapestry-ioc')
    api project(':tapestry-json')
    api project(':beanmodel')
    api project(':tapestry-http')

    implementation libs.jakarta.annotation.api
    implementation libs.jakarta.xml.bind.api

    implementation libs.commons.codec
    implementation libs.commons.lang3

    provided project(':tapestry-test')
    provided project(':tapestry-test-constants')

    provided libs.jakarta.servlet.api

    testImplementation libs.httpcomponents.httpclient
    testImplementation project(":tapestry-spock")

    testRuntimeOnly("${libs.hsqldb.get().module.group}:${libs.hsqldb.get().module.name}:${libs.hsqldb.get().version}:jdk8")
    testRuntimeOnly libs.guice
}

tasks.register('preprocessCoffeeScript', PreprocessCoffeeScript)

tasks.register('compileCoffeeScript', CompileCoffeeScript) {
    outputDir = file("${mainGeneratedDir}/compiled-coffeescript")
}

tasks.register('compileProcessedCoffeescript', CompileCoffeeScript) {
    dependsOn tasks.named('preprocessCoffeeScript')
    srcDir tasks.named('preprocessCoffeeScript').map { it.outputDir }
    outputDir = file("${mainGeneratedDir}/compiled-processed-coffeescript")
}

tasks.register('compileTestCoffeeScript', CompileCoffeeScript) {
    srcDir = file('src/test/coffeescript')
    outputDir = file("${testGeneratedDir}/compiled-coffeescript")
}

tasks.named('processResources') {
    from tasks.named('compileCoffeeScript')
    from tasks.named('compileProcessedCoffeescript')
}

tasks.named('processTestResources') {
    from tasks.named('compileTestCoffeeScript')
}

clean {
    delete mainGeneratedDir, testGeneratedDir
}

tasks.register('testWithPrototype', Test) {
    systemProperties['tapestry.javascript-infrastructure-provider'] = 'prototype'
}

[
    'app1',
    'app2',
    'app3',
    'app4',
    'app5',
    'app7',
    'appfolder'
].each { appName ->
    tasks.register("runTest${appName.capitalize()}", JavaExec) {
        group = 'Application'
        description = "Starts the ${appName} integration test app, useful when debugging."
        mainClass = 'org.apache.tapestry5.test.JettyRunner'
        args '-d', "src/test/${appName}", '-p', '8080'
        classpath = sourceSets.test.runtimeClasspath
    }
}
