plugins {
    id 'tapestry.junit5-convention'
    id 'tapestry.testng-convention'
}

import t5build.TapestryBuildLogic
import org.apache.tools.ant.filters.ReplaceTokens

description = 'Central module for Tapestry, containing all core services and components'

def npmWorkingDir = 'src/main/typescript/'
def npmExec = TapestryBuildLogic.isWindows() ? 'npm.cmd' : 'npm'

dependencies {
    api project(':tapestry-ioc')
    api project(':tapestry-json')
    api project(':beanmodel')
    api project(':tapestry-http')

    implementation libs.jakarta.annotation.api
    implementation libs.jakarta.xml.bind.api

    implementation libs.commons.codec
    implementation libs.commons.lang3

    provided project(':tapestry-test')
    provided project(':tapestry-test-constants')

    provided libs.jakarta.servlet.api

    testImplementation libs.httpcomponents.httpclient
    testImplementation project(":tapestry-spock")

    testRuntimeOnly("${libs.hsqldb.get().module.group}:${libs.hsqldb.get().module.name}:${libs.hsqldb.get().version}:jdk8")
    testRuntimeOnly libs.guice
}

tasks.register('npmInstall', Exec) {
    group = 'TypeScript'
    description = 'Runs npm install'
    
    workingDir = npmWorkingDir
    commandLine npmExec, 'install'
}

tasks.register('compileTypeScriptToAmd', Exec) {
    group = 'TypeScript'
    description = 'Compiles TypeScript to AMD modules'

    dependsOn npmInstall

    workingDir = npmWorkingDir
    commandLine npmExec, 'run', 'build-amd'
}

tasks.register('compileTypeScriptToEsModule', Exec) {
    group = 'TypeScript'
    description = 'Compiles TypeScript to ES modules'

    dependsOn npmInstall
    
    workingDir = npmWorkingDir
    commandLine npmExec, 'run', 'build-es-module'
}

tasks.register('compileTypeScript', Delete) {
    group = 'TypeScript'
    description = 'Compiles all TypeScript variants'

    dependsOn compileTypeScriptToAmd, compileTypeScriptToEsModule
}

tasks.named('sourcesJar') {
    dependsOn compileTypeScript
}

tasks.register('generateTypeScriptDocs', Exec) {
    group = 'TypeScript'
    description = 'Generates TypeScript documentation'

    dependsOn npmInstall

    workingDir = npmWorkingDir
    commandLine npmExec, 'run', 'docs'
}

tasks.register('cleanTypeScriptFiles', Delete) {
    group = 'TypeScript'
    description = 'Cleans generated TypeScript files'

    delete fileTree('src/main/resources/META-INF/assets/es-modules/t5/core') {
        include '**/*.js'
    }
    delete fileTree('src/main/resources/META-INF/modules/t5/core') {
        include '**/*.js'
    }
    delete 'src/main/typescript/docs'
}

tasks.named('processResources') {
    dependsOn compileTypeScript
}

tasks.named('clean') {
    dependsOn cleanTypeScriptFiles
}


// Not sure why this is necessary:
tasks.named('compileTestGroovy') {
    dependsOn compileTestJava
}

test {
    // Needed to have XMLTokenStreamTests.testStreamEncoding() passing on Java 9+
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_9)) {
        jvmArgs('--add-opens=java.base/java.nio.charset=ALL-UNNAMED')
    }

    // TAP5-2722
    systemProperty 'user.language', 'en'
}

[
    'app1',
    'app2',
    'app3',
    'app4',
    'app5',
    'app7',
    'appfolder'
].each { appName ->
    tasks.register("runTest${appName.capitalize()}", JavaExec) {
        group = 'Application'
        description = "Starts the ${appName} integration test app, useful when debugging."

        mainClass = 'org.apache.tapestry5.test.JettyRunner'
        args '-d', "src/test/${appName}", '-p', '8080'
        classpath = sourceSets.test.runtimeClasspath
    }
}

// Default is jQuery and Require.js enabled, so here are the tests for the
// other combinations

tasks.register('testWithJqueryAndRequireJsDisabled', Test) {
    group = 'Verification'
    description = 'Runs tests with jQuery and Require.js disabled'

    systemProperty 'tapestry.javascript-infrastructure-provider', 'jquery'
    systemProperty 'tapestry.require-js-enabled', 'false'
}

tasks.register('testWithPrototypeAndRequireJsEnabled', Test) {
    group = 'Verification'  
    description = 'Runs tests with Prototype and Require.js enabled'

    systemProperty 'tapestry.javascript-infrastructure-provider', 'prototype'
    systemProperty 'tapestry.require-js-enabled', 'true'
}

tasks.register('testWithPrototypeAndRequireJsDisabled', Test) {
    group = 'Verification'
    description = 'Runs tests with Prototype and Require.js disabled'

    systemProperty 'tapestry.javascript-infrastructure-provider', 'prototype'
    systemProperty 'tapestry.require-js-enabled', 'false'
}
