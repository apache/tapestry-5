// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.apache.tapestry5.services.javascript;

import org.apache.tapestry5.json.JSONObject;
import org.apache.tapestry5.services.javascript.EsModuleManager.EsModuleManagerContribution;

/**
 * Interface used to  to change the JSON configuration object which will be used in the
 * import map to be generated by the {@linkplain ModuleManager} service at 2 different times:
 * <ol>
 *     <li>
 *          During webapp, based on on contributions to {@linkplain EsModuleManager}.
 *          These are considered global callbacks, since they affect the base
 *          import map used in all requests.
 *     </li>
 *     <li>
 *          During page rendering, allowing components, pages and base components
 *          to further customize the base import map by for that specific request in 
 *          a per-request basis by using the 
 *          {@linkplain JavaScriptSupport#addEsModuleConfigurationCallback(EsModuleConfigurationCallback)} method.
 *     </li>
 * </ol>
 *
 * @see JavaScriptSupport#addEsModuleConfigurationCallback(EsModuleConfigurationCallback)
 * @since 5.10.0
 */
public interface EsModuleConfigurationCallback
{
    /**
     * Name of the JSON object property containing the imports in an import map.
     */
    String IMPORTS_ATTRIBUTE = "imports";

    /**
     * Receives the current configuration, which can be copied or returned, or, more typically, modified and returned.
     *
     * @param configuration
     *         a {@link JSONObject} containing the current configuration.
     */
    void configure(JSONObject configuration);
    
    /**
     * Utility method to set or override a module and its URL.
     * @param object the {@link JSONObject}.
     * @param id the module id.
     * @param url the module URL.
     */
    public static void setImport(JSONObject object, String id, String url) 
    {
        object.in(IMPORTS_ATTRIBUTE).put(id, url);
    }
    
    /**
     * Creates a base contribution (one that contributes a callback used 
     * when creating the base import map to be used for all requests).
     * Utility method to call {@linkplain EsModuleManagerContribution#base(EsModuleConfigurationCallback)}
     * @param callback an {@linkplain EsModuleConfigurationCallback} instance.
     * @return a corresponding {@linkplain EsModuleManagerContribution}.
     */
    public static EsModuleManagerContribution toBaseContribution(EsModuleConfigurationCallback callback)
    {
        return EsModuleManagerContribution.base(callback);
    }
    
    /**
     * Creates a global per-request contribution (one that contributes a callback used 
     * in all requests after the callbacks added through 
     * {@linkplain JavaScriptSupport#addEsModuleConfigurationCallback(EsModuleConfigurationCallback)} 
     * were called).
     * Utility method to call {@linkplain EsModuleManagerContribution#globalPerRequest(EsModuleConfigurationCallback)}
     * @param callback an {@linkplain EsModuleConfigurationCallback} instance.
     * @return a corresponding {@linkplain EsModuleManagerContribution}.
     */
    public static EsModuleManagerContribution toGlobalPerRequestContribution(EsModuleConfigurationCallback callback)
    {
        return EsModuleManagerContribution.globalPerRequest(callback);
    }
    
}
