<document>
    <body>
        <section name="Simple Example">

            <p>
                The Grid component is closely related to the BeanEditor component; they are both based on the same
                underlying concept and share quite a bit of code.
            </p>

            <p>In this example, we'll display a list of users.</p>

            <subsection name="User.java">
                <source><![CDATA[
public class User
{
    private long _id;

    private String _firstName;

    private String _lastName;

    private int _age;

    public long getId() { return _id; }

    @NonVisual
    public void setId(long id) { _id = id; }

    public String getFirstName() { return _firstName; }

    public void setFirstName(String firstName) { _firstName = firstName; }

    public String getLastName() { return _lastName; }

    public void setLastName(String lastName) { _lastName = lastName; }

    public int getAge() { return _age; }

    public void setAge(int age) { _age = age; }
}]]></source>

                <p>The @NonVisual annotation prevents the id from being displayed.</p>

            </subsection>

            <subsection name="UserList.tml">

                <p>
                    We want to make the user's last name a clickable link to a detail page for the user.
                </p>


                <source><![CDATA[
<html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_0_0.xsd">
    <body>
        <h1>List Users</h1>

        <t:grid source="users" row="user">
            <t:parameter name="lastnamecell">
                <t:pagelink page="viewuser" context="user.id">${user.lastname}</t:pagelink>
            </t:parameter>
        </t:grid>
    </body>
</html>
]]></source>


                <p>
                    The parameter name
                    <code><em>property</em>cell
                    </code>
                    is used
                    to override the rendering of cells for one property. As usual, case is ignored. Here we
                    use a PageLink component to link to a ViewUser page, passing the id of the user as
                    activation context for the target page.
                </p>

                <p>
                    For the block to know what is being rendered, we bind the row parameter of the Grid
                    to the user property of the page. The Grid will keep updating this property
                    just before it renders each row (using its own internal renderers, or the ones
                    provided as parameters).
                </p>

                <p>
                    Overriding of headers, the clickable links at the top of columns, is not yet implemented.
                </p>

            </subsection>

            <subsection name="UserList.java">
                <source><![CDATA[
public class UserList
{
    @Inject
    private UserDAO _userDAO;

    private User _user;

    public List<User> getUsers() { return _userDAO.findAll(); }

    public void setUser(User user) { _user = user; }

    public User getUser() { return _user; }
}]]></source>

            </subsection>

            <p>
                The UserList class exists to provide access to the UserDAO service, and to act as a holder
                for the user property, needed when the Grid is rendering.
            </p>

        </section>

        <section name="Adding Columns Example">

            <p>
                Commonly, you may want to add a column to the Grid to support a computed property, or as a placeholder
                for an action. We'll do the latter, adding a column for deleting a user.
            </p>

            <subsection name="UserList.tml">

                <p>
                    We want to make the user's last name a clickable link to a detail page for the user.
                </p>


                <source><![CDATA[
<html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_0_0.xsd">
    <body>
        <h1>List Users</h1>

        <t:grid source="users" model="model" row="user">
            <t:parameter name="lastnamecell">
                <t:pagelink page="viewuser" context="user.id">${user.lastname}</t:pagelink>
            </t:parameter>
            <t:parameter name="deletecell">
                <t:actionlink t:id="delete" context="user.id">Delete</t:actionlink>
            </t:parameter>
        </t:grid>
    </body>
</html>
]]></source>

                <p>
                    We now explicitly provide a model parameter. In addition, a block
                    for the "delete" property has been added that includes an ActionLink
                    used to delete the user for the current row. This property is a
                    <em>virtual</em>
                    property because it doesn't correspond to a property
                    of the data object, User.
                </p>

            </subsection>

            <subsection name="UserList.java">
                <source><![CDATA[
public class UserList
{
    @Inject
    private UserDAO _userDAO;

    @Inject
    private BeanModelSource _beanModelSource;

    @Inject
    private ComponentResources _resources;

    private final BeanModel _model;

    {
        _model = _source.create(User.class, true, _resources);

        _model.add("delete", null);
    }

    private User _user;

    public List<User> getUsers() { return _userDAO.findAll(); }

    public void setUser(User user) { _user = user; }

    public User getUser() { return _user; }

    public BeanModel getModel() { return _model; }

    void onActionFromDelete(long userId)
    {
        _userDAO.remove(userId);
    }
}]]></source>

                <p>
                    Here we create the model using the BeanModelSource service.
                    We then customize it, adding a new property, "delete". The null
                    indicates that this is a virtual property, with no real data behind it.
                </p>

            </subsection>

            <subsection name="UserList.properties">
                <source><![CDATA[
delete-label=Delete user?]]></source>

                <p>
                    The normal column title for the "delete" property would be "Delete". Using the
                    page's message catalog we can override that.
                </p>
            </subsection>


        </section>


        <section name="Notes">

            <p>
                Tapestry does a lot of work to help you with the source parameter. The parameter type
                is GridDataSource, but Tapestry has built-in coercions from
                Object[] and List. In more complicated cases, such as very large
                queries against a database, you will want to provide your own implementation
                of GridDataSource, to minimimze the sizes of queries and result sets.
            </p>


        </section>


    </body>
</document>