import org.gradle.plugins.ide.idea.model.*
import t5build.*

description = "Bridge to CDI for Apache Tapestry 5 Project"

apply plugin: JavaPlugin

buildDir = 'target/gradle-build'
       
project.ext.libraryVersions = [
    tomee: 'org.apache.openejb:arquillian-tomee-embedded:1.6.0',
    ziplock: 'org.apache.openejb:ziplock:1.5.1',
    commonsHttpclient: 'commons-httpclient:commons-httpclient:3.1',
    arquillianJunitContainer: 'org.jboss.arquillian.junit:arquillian-junit-container:1.1.1.Final',
    arquillianGlassfish: 'org.jboss.arquillian.container:arquillian-glassfish-managed-3.1:1.0.0.CR4',
    glassfishDistrib: 'org.glassfish.distributions:glassfish:3.1.1-b04@zip',
    jbossAS7: 'org.jboss.as:jboss-as-arquillian-container-managed:7.1.1.Final',
    jbossDistrib: 'org.jboss.as:jboss-as-dist:7.1.1.Final@zip',
    jbossJavaeeSpec: 'org.jboss.spec:jboss-javaee-6.0:1.0.0.Final',
    cdiApi: 'jakarta.enterprise:cdi-api:1.0-SP4',
    shrinkwrapDescriptorsApi: 'org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-api-javaee:2.0.0-alpha-3',
    shrinkwrapDescriptorsImpl: 'org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-impl-javaee:2.0.0-alpha-3',
]

configurations {
    compileOnly 
    jboss
    glassfish
    tomeeEmbeddedTestRuntime  { extendsFrom testRuntime, compileOnly }
    jbossAS7ManagedTestRuntime { extendsFrom testRuntime, compileOnly }
    glassfishManagedTestRuntime { extendsFrom testRuntime, compileOnly }
}

dependencies {
    compile project(':tapestry-core')
    compile project(':tapestry-ioc')
    testCompile (project(':tapestry-test')) {
        transitive = false
     }

    // replace jakarta.enterprise:cdi-api with group: 'org.jboss.spec', name: 'jboss-javaee-6.0', version: libraryVersions.jbossJavaeeSpec to compile against full Java EE API
    compileOnly moduleLibs.cdiApi

    testCompile moduleLibs.ziplock
    testCompile moduleLibs.commonsHttpclient
    
    testCompile moduleLibs.arquillianJunitContainer
    testCompile moduleLibs.shrinkwrapDescriptorsApi
    testRuntime moduleLibs.shrinkwrapDescriptorsImpl
    
    tomeeEmbeddedTestRuntime mopduleLibs.tomee
    
    jbossAS7ManagedTestRuntime moduleLibs.jbossAS7
    jbossAS7ManagedTestRuntime moduleLibs.jbossJavaeeSpec
    jboss moduleLibs.jbossDistrib
 
    glassfishManagedTestRuntime moduleLibs.arquillianGlassfish
    glassfish moduleLibs.glassfishDistrib
}

sourceSets {
    main {
        compileClasspath = configurations.compile + configurations.compileOnly
    }
    test {
        compileClasspath = compileClasspath + configurations.compileOnly
    }
}

idea {
    module {
       scopes.PROVIDED.plus += configurations.compileOnly
    }
}

eclipse {
    classpath {
        plusConfigurations += configurations.compileOnly
    }
}

task resolveJBoss(type: Copy) {
    destinationDir = file('target')
    from { zipTree(configurations.jboss.singleFile) }
}

task resolveGlassfish(type: Copy) {
    destinationDir = file('target')
    from { zipTree(configurations.glassfish.singleFile) }
}


task tomeeEmbeddedTest(type: Test) {
  systemProperty 'arquillian.launch', 'tomee_embedded'
}

task jbossAS7ManagedTest(type: Test) {
  systemProperty 'arquillian.launch', 'jbossas_managed'
   dependsOn { resolveJBoss }
}

task glassfishManagedTest(type: Test){
  systemProperty 'arquillian.launch', 'glassfish_managed'
   dependsOn { resolveGlassfish }
}

tasks.withType(Test).matching({ t-> t.name.endsWith('Test') } as Spec).each { t ->
    t.testClassesDir = sourceSets.test.output.classesDir
    t.classpath = sourceSets.test.output + sourceSets.main.output + configurations[t.name + 'Runtime']
}

test {
  dependsOn { tomeeEmbeddedTest }
  setEnabled(false)
}

jar {
    manifest {
        attributes 'Tapestry-Module-Classes': 'org.apache.tapestry5.cdi.CDIInjectModule'
    }
}
